{
	"info": {
		"_postman_id": "46d9dbae-c429-4156-8f0f-a1904bbf725d",
		"name": "Casting API",
		"description": "This API is for **The Kid Stays in the Picture!**, an application for managing the casting of actors in movies. Actors and movies can be created and assigned to each other.\n\nPermissions are role based and here you will find descriptions of each role and the actions they are allowed. All requests require an Authorization Bearer token.\n\nThe first three sections list the roles. The *Executive Producer* section describes the available requests and example responses in the most detail. The subsequent sections list which requests each role is allowed. The details for the requests in the first section also apply to the actions listed under other roles. The last section shows example error responses.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Executive Producer",
			"item": [
				{
					"name": "Create Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Michael J. Fox\",\n    \"gender\": \"m\",\n    \"age\": 50,\n    \"movies\": [2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "# Required\n\n* **name** - *String*, Max 100 chars\n* **gender** - *String*, 'm' or 'f'\n* **age** - *Integer*, between 0 and 150\n\n# Optional\n\n* **movies** - *Integer[]*, A list of existing movie IDs"
					},
					"response": [
						{
							"name": "Create Actor",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Janice\",\n\t\"gender\": \"f\",\n\t\"age\": 44\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "165"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:27:03 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"actors\": [\n        {\n            \"age\": 30,\n            \"gender\": \"Female\",\n            \"id\": 2,\n            \"movies\": [],\n            \"name\": \"Sally Fields\"\n        }\n    ],\n    \"success\": true\n}"
						},
						{
							"name": "Create Actor with movies",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Michael J. Fox\",\n    \"gender\": \"m\",\n    \"age\": 50,\n    \"movies\": [2,3]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "428"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 04:00:04 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"actors\": [\n        {\n            \"age\": 50,\n            \"gender\": \"Male\",\n            \"id\": 4,\n            \"movies\": [\n                {\n                    \"id\": 2,\n                    \"release_date\": \"Mon Mar 16 20:02:33 2020\",\n                    \"title\": \"A Masterpiece\"\n                },\n                {\n                    \"id\": 3,\n                    \"release_date\": \"Sun Mar 22 13:00:00 2020\",\n                    \"title\": \"The One\"\n                }\n            ],\n            \"name\": \"Michael J. Fox\"\n        }\n    ],\n    \"success\": true\n}"
						}
					]
				},
				{
					"name": "Get Actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c46d90a-a3ae-456c-a461-bfe6cf9a3139",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains actors array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors).to.be.an('array')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": [
						{
							"name": "Actor with a film",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "274"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:23:54 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"actors\": [\n        {\n            \"age\": 44,\n            \"gender\": \"Female\",\n            \"id\": 1,\n            \"movies\": [\n                {\n                    \"id\": 1,\n                    \"release_date\": \"Mon Jul 22 22:23:11 2024\",\n                    \"title\": \"The Big One\"\n                }\n            ],\n            \"name\": \"Amanda\"\n        }\n    ]\n}"
						},
						{
							"name": "Get Actors",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "139"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 02:51:23 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"actors\": [\n        {\n            \"age\": 44,\n            \"gender\": \"Female\",\n            \"id\": 1,\n            \"movies\": [],\n            \"name\": \"Janice\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Edit Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"actor has new name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors[0].name).to.equal('Amanda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Amanda\",\n\t\"movies\": [1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ep_actor_id}}",
									"description": "ID of the actor to edit"
								}
							]
						},
						"description": "# Optional\n\n* **name** - *String*, Max 100 chars\n* **gender** - *String*, 'm' or 'f'\n* **age** - *Integer*, between 0 and 150"
					},
					"response": [
						{
							"name": "Edit Actor",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Amanda\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ep_actor_id}}",
											"description": "ID of the actor to edit"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "159"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:00:20 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"actors\": [\n        {\n            \"age\": 44,\n            \"gender\": \"Female\",\n            \"id\": 1,\n            \"movies\": [],\n            \"name\": \"Amanda\"\n        }\n    ],\n    \"success\": true\n}"
						}
					]
				},
				{
					"name": "Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ep_actor_id}}",
									"description": "ID of actor to delete"
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete Actor",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/actors/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ep_actor_id}}",
											"description": "ID of actor to delete"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "38"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:01:43 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"delete\": 1,\n    \"success\": true\n}"
						}
					]
				},
				{
					"name": "Create Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"actor has new name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.movies[0].title).to.equal('The Big One')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "# Required\n\n* **title** - *String*, Max 100 chars.\n* **release_date** - *Integer*, a Unix timestamp\n\n# Optional\n\n* **actors** - *Integer[]*, A list of existing actor IDs"
					},
					"response": [
						{
							"name": "Create Movie with several actors",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "556"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:58:35 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"movies\": [\n        {\n            \"actors\": [\n                {\n                    \"age\": 44,\n                    \"gender\": \"Female\",\n                    \"id\": 1,\n                    \"name\": \"Amanda\"\n                },\n                {\n                    \"age\": 30,\n                    \"gender\": \"Female\",\n                    \"id\": 2,\n                    \"name\": \"Sally Fields\"\n                },\n                {\n                    \"age\": 44,\n                    \"gender\": \"Female\",\n                    \"id\": 3,\n                    \"name\": \"Janice\"\n                }\n            ],\n            \"id\": 4,\n            \"release_date\": \"Sun Mar 22 13:00:00 2020\",\n            \"title\": \"The All My Children\"\n        }\n    ],\n    \"success\": true\n}"
						}
					]
				},
				{
					"name": "Get Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ca7d736-c1f8-4f90-9f2a-333246d92310",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains movies array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.movies).to.be.an('array')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": [
						{
							"name": "Get Movies",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "411"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 03:17:50 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"movies\": [\n        {\n            \"actors\": [\n                {\n                    \"age\": 44,\n                    \"gender\": \"Female\",\n                    \"id\": 1,\n                    \"name\": \"Amanda\"\n                }\n            ],\n            \"id\": 1,\n            \"release_date\": \"Mon Jul 22 22:23:11 2024\",\n            \"title\": \"The Big One\"\n        },\n        {\n            \"actors\": [],\n            \"id\": 2,\n            \"release_date\": \"Mon Mar 16 20:02:33 2020\",\n            \"title\": \"A Masterpiece\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Edit Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"actor has new name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors[0].name).to.equal('Amanda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Amanda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"description": "ID of movie to edit",
									"key": "id",
									"value": "{{ep_movie_id}}"
								}
							]
						},
						"description": "# Optional\n\n* **title** - *String*, Max 100 chars.\n* **release_date** - *Integer*, a Unix timestamp\n* **actors** - *Integer[]*, A list of existing actor IDs"
					},
					"response": []
				},
				{
					"name": "Delete Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": "The JWT token for the role",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ep_movie_id}}",
									"description": "ID of movie to delete"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Members of this role are basically site administrators. All actions are allowed",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ep_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e4dd872-ca3c-44a5-b5b4-af3f2a31f96e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "201082ff-c5ee-4cba-9b07-cadee2c18b7c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Casting Director",
			"item": [
				{
					"name": "Get Actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c46d90a-a3ae-456c-a461-bfe6cf9a3139",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains actors array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors).to.be.an('array')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Clarece\",\n\t\"gender\": \"f\",\n\t\"age\": 88\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"actor has new name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors[0].name).to.equal('Amanda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Amanda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/actors/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"actor has new name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors[0].name).to.equal('Amanda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Amanda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ep_movie_id}}",
									"description": "ID of movie to edit"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All privileges of Casting Assistant, plus a few more.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{cd_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c28106a8-3cbe-441d-82e8-8e1534f01258",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c6aa343a-a0dd-44e0-8ad7-f93cb64406ad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Casting Assistant",
			"item": [
				{
					"name": "Get Actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c46d90a-a3ae-456c-a461-bfe6cf9a3139",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains actors array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.actors).to.be.an('array')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ca7d736-c1f8-4f90-9f2a-333246d92310",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains movies array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.movies).to.be.an('array')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			],
			"description": "Can only view actors and movies.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{ca_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f7dea5ee-a643-49f6-a281-8b97bdadbe96",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a7615311-7daa-415b-97a6-cbfac8d4dc7e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Errors",
			"item": [
				{
					"name": "Expired Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f679399e-54f6-43b6-9477-362e12aec600",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expired_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": [
						{
							"name": "Expired Token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"status": "BAD REQUEST",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "88"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 15:00:40 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 400,\n    \"description\": \"Token has expired\",\n    \"message\": \"token_expired\"\n}"
						}
					]
				},
				{
					"name": "Entity Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff3d0d5-74b5-430d-93d4-6b5fa40e7024",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1Ea3pOMEV4UmtRMVFqQXpPVEkxUkRKR01ERXpRVVk0TkRrMk9VRkVSVGhETVRnM016VTJOQSJ9.eyJpc3MiOiJodHRwczovL3N3aXYtZnNuZC5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWU4MjlkZjZlNTAyM2QwYmRiNzY4MjAzIiwiYXVkIjoiY2FzdGluZyIsImlhdCI6MTU4NTgzOTAyMSwiZXhwIjoxNTg1ODQ3NDIxLCJhenAiOiJxSmJxcWxRR05pY245dlRXcjNJTFk5RVMxbzlXS05FRCIsImd0eSI6InBhc3N3b3JkIiwicGVybWlzc2lvbnMiOlsiY3JlYXRlOmFjdG9ycyIsImRlbGV0ZTphY3RvcnMiLCJnZXQ6YWN0b3JzIiwiZ2V0Om1vdmllcyIsInVwZGF0ZTphY3RvcnMiLCJ1cGRhdGU6bW92aWVzIl19.C0cGtst284-nz0NSsRCkDwFvy_LAnSE1539NpQbmpaWf1g0ocgQYNCMBLidxHkXANdYaVzcjm5Bjs46SKLRyRDhKBQm8qYhUmbjj4k4EuihTXk0h-kjIZqEuZlXL-efYNLW52H1qvt76fG09GiUN0KLlYGfLb0Lxb7drNRD0C31b1W6uk4Phxqf6luEMjjhndi4vt0KxT6t7eu00OHT23iX98uro0Ye2cK3J68rEC_HkdvvwZ7p0XigzBMYuJaHXlGLSGo3_sbQy7nXjTsIr_yR9O-0UqJUZj1pZUlDu5lnsUeBEQNALWvnKqu_GqVEa8mkaxepq-m0ZtmUWZtVD8Q",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Amanda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/20",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"20"
							]
						}
					},
					"response": [
						{
							"name": "Entity Not Found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Amanda\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/20",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"20"
									]
								}
							},
							"status": "NOT FOUND",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "160"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 14:51:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 404,\n    \"description\": \"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\"\n}"
						}
					]
				},
				{
					"name": "Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ca_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "Usually due to not having the permissions for the request"
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "The JWT token for the role",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"status": "UNAUTHORIZED",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "75"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 14:58:57 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 401,\n    \"description\": \"Permission create:movies not found.\"\n}"
						}
					]
				},
				{
					"name": "Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ca_token}}",
									"type": "string"
								}
							]
						},
						"method": "PURGE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": [
						{
							"name": "Methond Not Allowed",
							"originalRequest": {
								"method": "PURGE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "The JWT token for the role",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"status": "METHOD NOT ALLOWED",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "88"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 15:04:39 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 405,\n    \"description\": \"The method is not allowed for the requested URL.\"\n}"
						}
					]
				},
				{
					"name": "Auth Header Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360b37d2-c246-413d-8113-71dd56f2b33b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "This request has no Authorization header, but other errors based on problems when verifying are also reported."
					},
					"response": [
						{
							"name": "Auth Header Invalid",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "The JWT token for the role",
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"The All My Children\",\n\t\"release_date\": 1584900000,\n\t\"actors\": [1,2,3]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"status": "BAD REQUEST",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "99"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PATCH"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.0 Python/3.7.4"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Apr 2020 15:11:02 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 400,\n    \"description\": \"Could not decode auth token\",\n    \"message\": \"invalid_header\"\n}"
						}
					]
				}
			],
			"description": "The following requests yield responses that demonstrate the errors that are returned.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "327beb97-ded6-4db4-b023-0acce140d721",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9d121f60-5c20-4c20-abd9-d85e6da1c47d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fbda583e-6a3a-4fb1-81cc-de57304b32c5",
			"key": "ep_actor_id",
			"value": "1",
			"type": "string"
		},
		{
			"id": "c32f0ff6-9ae3-4213-9954-df3c693c397f",
			"key": "ep_movie_id",
			"value": "1",
			"type": "string"
		},
		{
			"id": "60254a5c-eeb4-4646-b86c-3caf8d8e9ae0",
			"key": "cd_actor_id",
			"value": "2",
			"type": "string"
		},
		{
			"id": "93cb92a9-0af0-45c2-84ac-6fd225f671ad",
			"key": "expired_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1Ea3pOMEV4UmtRMVFqQXpPVEkxUkRKR01ERXpRVVk0TkRrMk9VRkVSVGhETVRnM016VTJOQSJ9.eyJpc3MiOiJodHRwczovL3N3aXYtZnNuZC5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWU4MDJmZWJlYzUxYmUwYzg5MDRiOWQ0IiwiYXVkIjoiY2FzdGluZyIsImlhdCI6MTU4NTYxMTIxMSwiZXhwIjoxNTg1NjExMjcxLCJhenAiOiJxSmJxcWxRR05pY245dlRXcjNJTFk5RVMxbzlXS05FRCIsImd0eSI6InBhc3N3b3JkIiwicGVybWlzc2lvbnMiOlsiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiXX0.y1xh37MMhT2GLQaOYTz2s0jlnPpRszofyq-2YPFGMmvX_Ir636ofuKwxG8BRSuXPvBSLLgT8fHyI2zODnhj2O2TJiucWsDiWmOgyBS5W8KEQYUjG3bbZTXS3OZ7ahPKafaTMtsQUFY_dneAPv_2NYr5jB13gAnuhBum7J4wPJotC_VusDexaMuLZ_UkfzQxm5T2Y14YDpSEhFuQU2RbeWfuoXq7uEPwdHL3N_uUnNysdgjGmC9y0TPVSnmEzwBWZV2VTjCh7_rUrshfFcOEVg6mk_JgtsYLd9noTU01lIgchdoJX1ATzu4WinLWY_dWPHr1qNy_grMYn_p3BeiZsQw",
			"type": "string"
		},
		{
			"id": "ba6bb1ba-7a80-46f9-9e1f-5defd2c1be95",
			"key": "cd_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1Ea3pOMEV4UmtRMVFqQXpPVEkxUkRKR01ERXpRVVk0TkRrMk9VRkVSVGhETVRnM016VTJOQSJ9.eyJpc3MiOiJodHRwczovL3N3aXYtZnNuZC5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWU4MjlkZjZlNTAyM2QwYmRiNzY4MjAzIiwiYXVkIjoiY2FzdGluZyIsImlhdCI6MTU4NTgzOTAyMSwiZXhwIjoxNTg1ODQ3NDIxLCJhenAiOiJxSmJxcWxRR05pY245dlRXcjNJTFk5RVMxbzlXS05FRCIsImd0eSI6InBhc3N3b3JkIiwicGVybWlzc2lvbnMiOlsiY3JlYXRlOmFjdG9ycyIsImRlbGV0ZTphY3RvcnMiLCJnZXQ6YWN0b3JzIiwiZ2V0Om1vdmllcyIsInVwZGF0ZTphY3RvcnMiLCJ1cGRhdGU6bW92aWVzIl19.C0cGtst284-nz0NSsRCkDwFvy_LAnSE1539NpQbmpaWf1g0ocgQYNCMBLidxHkXANdYaVzcjm5Bjs46SKLRyRDhKBQm8qYhUmbjj4k4EuihTXk0h-kjIZqEuZlXL-efYNLW52H1qvt76fG09GiUN0KLlYGfLb0Lxb7drNRD0C31b1W6uk4Phxqf6luEMjjhndi4vt0KxT6t7eu00OHT23iX98uro0Ye2cK3J68rEC_HkdvvwZ7p0XigzBMYuJaHXlGLSGo3_sbQy7nXjTsIr_yR9O-0UqJUZj1pZUlDu5lnsUeBEQNALWvnKqu_GqVEa8mkaxepq-m0ZtmUWZtVD8Q",
			"type": "string"
		},
		{
			"id": "ba71e54b-a490-42b6-91fc-e38808cebdc8",
			"key": "ca_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1Ea3pOMEV4UmtRMVFqQXpPVEkxUkRKR01ERXpRVVk0TkRrMk9VRkVSVGhETVRnM016VTJOQSJ9.eyJpc3MiOiJodHRwczovL3N3aXYtZnNuZC5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWU4MDJmZWJlYzUxYmUwYzg5MDRiOWQ0IiwiYXVkIjoiY2FzdGluZyIsImlhdCI6MTU4NTgzOTAwMCwiZXhwIjoxNTg1ODQ3NDAwLCJhenAiOiJxSmJxcWxRR05pY245dlRXcjNJTFk5RVMxbzlXS05FRCIsImd0eSI6InBhc3N3b3JkIiwicGVybWlzc2lvbnMiOlsiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiXX0.pnV7TOdnjsz6STNa4Cj4KrPrO_mi1yNxQ_QnWDe7SNb7yb0SkgXz0yfl-D9Xv4BjLTBTNTsJPxuMzwQfVAysVwAWQsrbwQGHACEA_QQEcJz8LhK1wrcQApqNsFCBI8WdCn3lrsHe2fQKsn-hD-qo6wbX7hX0mgjSPXz8VQqX5jhdVH4ZJAPw-N8ku4e2Q08jTTR3HJwi9lq-1KMD2Ayc57gHozIXnJrKOgmFQxzHLPS2xhfTT09iJ6F9qyrkyTJ_w_ec807p_ozFLy0d2o59RzYD5M4XcMBv1ZSaT7k4YzYQLJB9c-0beae6u8OJmphiQa3yYM9FS4Mu-gx2GEd5Ww",
			"type": "string"
		},
		{
			"id": "84e73760-fd4d-46d6-aefc-253621875c12",
			"key": "ep_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1Ea3pOMEV4UmtRMVFqQXpPVEkxUkRKR01ERXpRVVk0TkRrMk9VRkVSVGhETVRnM016VTJOQSJ9.eyJpc3MiOiJodHRwczovL3N3aXYtZnNuZC5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWU4NDA3NTlhYjg4ZDQwYmU4OWZhOGI2IiwiYXVkIjoiY2FzdGluZyIsImlhdCI6MTU4NTc5MTk5MSwiZXhwIjoxNTg1ODAwMzkxLCJhenAiOiJxSmJxcWxRR05pY245dlRXcjNJTFk5RVMxbzlXS05FRCIsImd0eSI6InBhc3N3b3JkIiwicGVybWlzc2lvbnMiOlsiY3JlYXRlOmFjdG9ycyIsImNyZWF0ZTptb3ZpZXMiLCJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOm1vdmllcyIsImdldDphY3RvcnMiLCJnZXQ6bW92aWVzIiwidXBkYXRlOmFjdG9ycyIsInVwZGF0ZTptb3ZpZXMiXX0.WfozTNc5ojFzLnYkjtPE1oxuZwEAyt0e5JIJT-t8_-tW0FU8ORSFpOPwEn7nPZyqIgOZTbI4ttciljOZfKK9UJJrddKOgqGwJtiHtzOF7ynlCwallrdJk7X4oyhNHLuFmdJ71odYxLyw1DAHslBd6hpTe3rYBDtPA3quwfDSy5LcrmohLs-P3k0khMpHwxDq0ZaUpSY8o8h-Uo2VyzQDy0L20SH7nbgkv7TbTSx6Q22MyFiLmFDmzV2OQF-yYxnotizvwFNKNFDiFd3aLdjDwmxrTfCcKdhOtbJReSCFPHCTgJIjAWAgoet65CyE5tIUD9IMPQLSu1YWAyr_p0wQ9w",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}